{"ast":null,"code":"import _classCallCheck from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Kevin/Code/reborn/src/components/Youtube.js\";\nimport React, { Component } from \"react\";\nimport ArticleVideo from \"./ArticleVideo\";\nimport home from \"../videos/HomePage.mp4\";\nimport player from \"../videos/Player.mp4\";\nimport videoPlayer from \"../img/VideoPlayer.jpg\";\nimport playerView from \"../img/PlayerView.jpg\";\nimport pip from \"../videos/Pip.mp4\";\nimport instantPlaylist from \"../videos/InstantPlaylist.mp4\";\nimport save from \"../videos/Save.mp4\";\nimport BlockQuote from \"./BlockQuote\";\nimport ArticleImage from \"./ArticleImage\";\n\nvar Youtube =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Youtube, _Component);\n\n  function Youtube() {\n    _classCallCheck(this, Youtube);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Youtube).apply(this, arguments));\n  }\n\n  _createClass(Youtube, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          currentMediaIndex = _this$props.currentMediaIndex,\n          concepts = _this$props.concepts,\n          selected_concept = _this$props.selected_concept;\n      return React.createElement(\"div\", {\n        id: \"article-body\",\n        className: \"article-body max-width \" + (darkMode ? \"article-body--dark\" : \"\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(ArticleVideo, {\n        index: 0,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: home,\n        mediaDescription: \"The new HomePage in action, with a better emphasis on recommendations.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"First, the HomePage. The new HomePage is all about recommendations. Recommended videos preview automatically in the background. You can start watching the video directly from there, pause the preview, or add it to the \\\"Watch Later\\\" playlist.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"You can also create a playlist with all the recommended videos simply by clicking the red play button.\"), React.createElement(BlockQuote, {\n        quote: \"Youtube 2.0 vows to build a trust relationship with the user, so that their typical experience consists in launching their recommendations and adjusting the playlist on the go.\",\n        shadow: \"Trust\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Next: the player. In Youtube 2.0, the player has been completely redesigned, to offer a fresh new modal look inspired by the mobile, along with new multitasking features.\"), React.createElement(ArticleVideo, {\n        index: 1,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: player,\n        mediaDescription: \"The new Player View.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"In this concept, the Like and Dislike buttons sit on top of the video player.\"), React.createElement(ArticleImage, {\n        index: 2,\n        currentMediaIndex: currentMediaIndex,\n        imgSrc: videoPlayer,\n        mediaDescription: \"The new video player, with the Like and Dislike buttons directly accessible from there.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Their position in the current interface make them hardly reachable: you have to quit the fullscren mode in order to see them. An incoherent design choice is also that the current interface encourages you to jump to the next video directly from the player.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"As a consequence, most of the time, I end up leaving the video without having liked (or disliked) it. It\\u2019s something that should be avoided because then the youtubers are not rewarded for their work, and also because I missed a chance as a user to tell Youtube what my preferences were, and it could potentially end up in less relevant recommendations.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Sometimes, I also hit the Like button before even watching the video but that can prove misleading for the algorithms as well, and it\\u2019s not how the Like/Dislike buttons were supposed to work after all.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Another change is that you see people's votes only after voting yourself, so as to help fighting against toxic online behaviors such as trolling or harassment.\"), React.createElement(BlockQuote, {\n        quote: \"A simple change to the behavior of the Like/Dislike buttons can lead to a more inclusive, less normative and healthier platform.\",\n        shadow: \"Healthy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Now, let's focus on the right side of the Player View.\"), React.createElement(ArticleImage, {\n        portrait: true,\n        index: 3,\n        currentMediaIndex: currentMediaIndex,\n        imgSrc: playerView,\n        mediaDescription: \"The right side of the Player View, organised differently.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"The right side has been completely redesigned. It still shows relevant videos, but organize them in a more explicit and consistent way to remove any ambiguity and mental cognitive load.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"\\\"My Playlist\\\" displays videos in the queue that will play after the current one.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"\\\"My Recommendations\\\" is the same playlist as the one found in the HomePage. These are general recommendations and do not depend on the video currently watched.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Finally, \\\"More Like This One\\\" groups videos that are similar the current one.\"), React.createElement(BlockQuote, {\n        quote: \"The changes made to the organization of the videos aim at being more informative about the decisions made by the AI. Transparency is key when it comes to building trust relationships.\",\n        shadow: \"Transparency\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"The next feature I designed is something I have been wanting for a long time: Picture-in-Picture (PiP).\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"The new design of the Player View implements PiP in an intuitive and elegant way. Simply click the drag bar at the top (or the Search Bar), the panel will be dismissed and the video will enter PiP mode.\"), React.createElement(ArticleVideo, {\n        index: 4,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: pip,\n        mediaDescription: \"Picture-in-Picture in Youtube 2.0.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"PiP is great for multitasking. You can now search for other videos without having to leave the current one, which makes for a more fluid experience.\"), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"To add a video in the Up Next Queue, simply drag a video to the bottom of the page: you have just created what I call an \\\"Instant Playlist\\\". You can add as many videos as you want.\"), React.createElement(ArticleVideo, {\n        index: 5,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: instantPlaylist,\n        mediaDescription: \"Creating an Instant Playlist.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Instant Playlists are temporary: when you leave the website, they stop existing. However, you can transform an Instant Playlist into an actual Playlist with a click.\"), React.createElement(ArticleVideo, {\n        index: 6,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: save,\n        mediaDescription: \"Transform an Instant Playlist into a playlist with a click.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"And that's a wrap for Youtube 2.0!\"), React.createElement(BlockQuote, {\n        quote: \"Youtube 2.0 relies on two key principles: transparency and fluidity. Transparency is an obligation for AI-oriented platforms such as this one. And modern interactions help for a better and more fluid experience tailored for new generations of users coming from the mobile.\",\n        shadow: \"Modern\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Youtube;\n}(Component);\n\nvar selector = createSelector(function (state) {\n  return state[\"selected_concept\"];\n}, function (state) {\n  return state[\"concepts\"];\n}, function (selected_concept, concepts) {\n  return {\n    selected_concept: selected_concept,\n    concepts: concepts\n  };\n});\nexport default connect(selector)(Youtube);","map":{"version":3,"sources":["/Users/Kevin/Code/reborn/src/components/Youtube.js"],"names":["React","Component","ArticleVideo","home","player","videoPlayer","playerView","pip","instantPlaylist","save","BlockQuote","ArticleImage","Youtube","props","currentMediaIndex","concepts","selected_concept","darkMode","selector","createSelector","state","connect"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ArticleVideo from \"./ArticleVideo\";\nimport home from \"../videos/HomePage.mp4\";\nimport player from \"../videos/Player.mp4\";\nimport videoPlayer from \"../img/VideoPlayer.jpg\";\nimport playerView from \"../img/PlayerView.jpg\";\nimport pip from \"../videos/Pip.mp4\";\nimport instantPlaylist from \"../videos/InstantPlaylist.mp4\";\nimport save from \"../videos/Save.mp4\";\nimport BlockQuote from \"./BlockQuote\";\nimport ArticleImage from \"./ArticleImage\";\n\nclass Youtube extends Component {\n  render() {\n    const { currentMediaIndex, concepts, selected_concept } = this.props;\n    return (\n      <div\n        id=\"article-body\"\n        className={\n          \"article-body max-width \" + (darkMode ? \"article-body--dark\" : \"\")\n        }\n      >\n        <ArticleVideo\n          index={0}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={home}\n          mediaDescription={\n            \"The new HomePage in action, with a better emphasis on recommendations.\"\n          }\n        />\n        <p className=\"article-paragraph\">\n          First, the HomePage. The new HomePage is all about recommendations.\n          Recommended videos preview automatically in the background. You can\n          start watching the video directly from there, pause the preview, or\n          add it to the \"Watch Later\" playlist.\n        </p>\n        <p className=\"article-paragraph\">\n          You can also create a playlist with all the recommended videos simply\n          by clicking the red play button.\n        </p>\n        <BlockQuote\n          quote={\n            \"Youtube 2.0 vows to build a trust relationship with the user, so that their typical experience consists in launching their recommendations and adjusting the playlist on the go.\"\n          }\n          shadow={\"Trust\"}\n        />\n        <p className=\"article-paragraph\">\n          Next: the player. In Youtube 2.0, the player has been completely\n          redesigned, to offer a fresh new modal look inspired by the mobile,\n          along with new multitasking features.\n        </p>\n        <ArticleVideo\n          index={1}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={player}\n          mediaDescription={\"The new Player View.\"}\n        />\n        <p className=\"article-paragraph\">\n          In this concept, the Like and Dislike buttons sit on top of the video\n          player.\n        </p>\n        <ArticleImage\n          index={2}\n          currentMediaIndex={currentMediaIndex}\n          imgSrc={videoPlayer}\n          mediaDescription={\n            \"The new video player, with the Like and Dislike buttons directly accessible from there.\"\n          }\n        />\n        <p className=\"article-paragraph\">\n          Their position in the current interface make them hardly reachable:\n          you have to quit the fullscren mode in order to see them. An\n          incoherent design choice is also that the current interface encourages\n          you to jump to the next video directly from the player.\n        </p>\n        <p className=\"article-paragraph\">\n          As a consequence, most of the time, I end up leaving the video without\n          having liked (or disliked) it. It’s something that should be avoided\n          because then the youtubers are not rewarded for their work, and also\n          because I missed a chance as a user to tell Youtube what my\n          preferences were, and it could potentially end up in less relevant\n          recommendations.\n        </p>\n        <p className=\"article-paragraph\">\n          Sometimes, I also hit the Like button before even watching the video\n          but that can prove misleading for the algorithms as well, and it’s not\n          how the Like/Dislike buttons were supposed to work after all.\n        </p>\n        <p className=\"article-paragraph\">\n          Another change is that you see people's votes only after voting\n          yourself, so as to help fighting against toxic online behaviors such\n          as trolling or harassment.\n        </p>\n        <BlockQuote\n          quote={\n            \"A simple change to the behavior of the Like/Dislike buttons can lead to a more inclusive, less normative and healthier platform.\"\n          }\n          shadow={\"Healthy\"}\n        />\n        <p className=\"article-paragraph\">\n          Now, let's focus on the right side of the Player View.\n        </p>\n        <ArticleImage\n          portrait\n          index={3}\n          currentMediaIndex={currentMediaIndex}\n          imgSrc={playerView}\n          mediaDescription={\n            \"The right side of the Player View, organised differently.\"\n          }\n        />\n        <p className=\"article-paragraph\">\n          The right side has been completely redesigned. It still shows relevant\n          videos, but organize them in a more explicit and consistent way to\n          remove any ambiguity and mental cognitive load.\n        </p>\n        <p className=\"article-paragraph\">\n          \"My Playlist\" displays videos in the queue that will play after the\n          current one.\n        </p>\n        <p className=\"article-paragraph\">\n          \"My Recommendations\" is the same playlist as the one found in the\n          HomePage. These are general recommendations and do not depend on the\n          video currently watched.\n        </p>\n        <p className=\"article-paragraph\">\n          Finally, \"More Like This One\" groups videos that are similar the\n          current one.\n        </p>\n        <BlockQuote\n          quote={\n            \"The changes made to the organization of the videos aim at being more informative about the decisions made by the AI. Transparency is key when it comes to building trust relationships.\"\n          }\n          shadow={\"Transparency\"}\n        />\n        <p className=\"article-paragraph\">\n          The next feature I designed is something I have been wanting for a\n          long time: Picture-in-Picture (PiP).\n        </p>\n        <p className=\"article-paragraph\">\n          The new design of the Player View implements PiP in an intuitive and\n          elegant way. Simply click the drag bar at the top (or the Search Bar),\n          the panel will be dismissed and the video will enter PiP mode.\n        </p>\n        <ArticleVideo\n          index={4}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={pip}\n          mediaDescription={\"Picture-in-Picture in Youtube 2.0.\"}\n        />\n        <p className=\"article-paragraph\">\n          PiP is great for multitasking. You can now search for other videos\n          without having to leave the current one, which makes for a more fluid\n          experience.\n        </p>\n        <p className=\"article-paragraph\">\n          To add a video in the Up Next Queue, simply drag a video to the bottom\n          of the page: you have just created what I call an \"Instant Playlist\".\n          You can add as many videos as you want.\n        </p>\n        <ArticleVideo\n          index={5}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={instantPlaylist}\n          mediaDescription={\"Creating an Instant Playlist.\"}\n        />\n        <p className=\"article-paragraph\">\n          Instant Playlists are temporary: when you leave the website, they stop\n          existing. However, you can transform an Instant Playlist into an\n          actual Playlist with a click.\n        </p>\n        <ArticleVideo\n          index={6}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={save}\n          mediaDescription={\n            \"Transform an Instant Playlist into a playlist with a click.\"\n          }\n        />\n        <p className=\"article-paragraph\">And that's a wrap for Youtube 2.0!</p>\n        <BlockQuote\n          quote={\n            \"Youtube 2.0 relies on two key principles: transparency and fluidity. Transparency is an obligation for AI-oriented platforms such as this one. And modern interactions help for a better and more fluid experience tailored for new generations of users coming from the mobile.\"\n          }\n          shadow={\"Modern\"}\n        />\n      </div>\n    );\n  }\n}\n\nconst selector = createSelector(\n  state => state[\"selected_concept\"],\n  state => state[\"concepts\"],\n  (selected_concept, concepts) => {\n    return {\n      selected_concept,\n      concepts\n    };\n  }\n);\n\nexport default connect(selector)(Youtube);\n"]},"metadata":{},"sourceType":"module"}