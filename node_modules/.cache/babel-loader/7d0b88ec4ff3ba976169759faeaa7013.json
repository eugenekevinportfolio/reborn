{"ast":null,"code":"import _classCallCheck from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Kevin/Desktop/reborn/src/components/Tab.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { bindActionCreators } from 'redux';\nimport { openPanel, selectTab } from '../actions/index.js';\n\nvar Tab =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tab, _Component);\n\n  function Tab() {\n    _classCallCheck(this, Tab);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tab).apply(this, arguments));\n  }\n\n  _createClass(Tab, [{\n    key: \"tabStyle\",\n    value: function tabStyle() {\n      var _this$props = this.props,\n          panel = _this$props.panel,\n          id = _this$props.id,\n          selected_tab = _this$props.selected_tab,\n          tabs = _this$props.tabs,\n          window_dimensions = _this$props.window_dimensions;\n      var tabs_ids = Object.keys(tabs);\n      var tab_index = tabs_ids.indexOf(id);\n\n      if (window_dimensions.isMobile) {} else {\n        if (id === selected_tab) {\n          return {\n            backgroundColor: \"white\",\n            color: \"black\",\n            transitionDuration: \"0.5s\"\n          };\n        } else {\n          if (panel.isOpen) {\n            if (panel.flavor !== id) {\n              return {\n                opacity: 0.3,\n                transitionDuration: \"0.5s\"\n              };\n            } else {\n              return {\n                backgroundColor: \"white\",\n                color: \"black\",\n                transitionDuration: \"0.5s\"\n              };\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          text = _this$props2.text,\n          panel = _this$props2.panel,\n          id = _this$props2.id;\n      return React.createElement(\"li\", {\n        onClick: function onClick() {\n          var section_DOM = document.getElementById(id);\n          section_DOM.childNodes[0].scrollIntoView({\n            behavior: 'smooth'\n          });\n\n          if (panel.isOpen) {\n            _this.props.openPanel(false, \"\");\n          }\n        },\n        style: this.tabStyle(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, text.toUpperCase());\n    }\n  }]);\n\n  return Tab;\n}(Component);\n\nfunction matchDispatchToProps(dispatch) {\n  return bindActionCreators({\n    openPanel: openPanel,\n    selectTab: selectTab\n  }, dispatch);\n}\n\nvar selector = createSelector(function (state) {\n  return state['panel'];\n}, function (state) {\n  return state['selected_tab'];\n}, function (state) {\n  return state['window_dimensions'];\n}, function (state) {\n  return state['tabs'];\n}, function (panel, selected_tab, window_dimensions, tabs) {\n  return {\n    panel: panel,\n    selected_tab: selected_tab,\n    window_dimensions: window_dimensions,\n    tabs: tabs\n  };\n});\nexport default connect(selector, matchDispatchToProps)(Tab);","map":{"version":3,"sources":["/Users/Kevin/Desktop/reborn/src/components/Tab.js"],"names":["React","Component","connect","createSelector","bindActionCreators","openPanel","selectTab","Tab","props","panel","id","selected_tab","tabs","window_dimensions","tabs_ids","Object","keys","tab_index","indexOf","isMobile","backgroundColor","color","transitionDuration","isOpen","flavor","opacity","text","section_DOM","document","getElementById","childNodes","scrollIntoView","behavior","tabStyle","toUpperCase","matchDispatchToProps","dispatch","selector","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { bindActionCreators } from 'redux';\nimport {\n  openPanel,\n  selectTab\n} from '../actions/index.js';\n\nclass Tab extends Component {\n  tabStyle() {\n    const { panel, id, selected_tab, tabs, window_dimensions } = this.props;\n\n    const tabs_ids = Object.keys(tabs);\n    const tab_index = tabs_ids.indexOf(id);\n    if (window_dimensions.isMobile) {\n\n    }\n    else {\n      if (id === selected_tab) {\n        return {\n          backgroundColor: \"white\",\n          color: \"black\",\n          transitionDuration: \"0.5s\"\n        }\n      }\n      else {\n        if (panel.isOpen) {\n          if (panel.flavor !== id) {\n            return {\n              opacity: 0.3,\n              transitionDuration: \"0.5s\"\n            }\n          }\n          else {\n            return {\n              backgroundColor: \"white\",\n              color: \"black\",\n              transitionDuration: \"0.5s\"\n            }\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const { text, panel, id } = this.props;\n    return (\n      <li\n        onClick={() => {\n          const section_DOM = document.getElementById(id);\n          section_DOM.childNodes[0].scrollIntoView({\n            behavior: 'smooth'\n          });\n          if (panel.isOpen) {\n            this.props.openPanel(false, \"\");\n          }\n        }}\n        style={this.tabStyle()}>\n        {text.toUpperCase()}\n      </li>\n    );\n  }\n}\n\nfunction matchDispatchToProps(dispatch) {\n  return bindActionCreators({\n    openPanel,\n    selectTab\n  }, dispatch)\n}\n\nconst selector = createSelector(\n  state => state['panel'],\n  state => state['selected_tab'],\n  state => state['window_dimensions'],\n  state => state['tabs'],\n  (\n    panel,\n    selected_tab,\n    window_dimensions,\n    tabs\n) => {\n    return  {\n      panel,\n      selected_tab,\n      window_dimensions,\n      tabs\n    };\n  }\n);\n\nexport default connect(selector, matchDispatchToProps)(Tab);\n"]},"metadata":{},"sourceType":"module"}