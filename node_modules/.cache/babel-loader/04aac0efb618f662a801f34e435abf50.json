{"ast":null,"code":"import _classCallCheck from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Kevin/Desktop/reborn/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Kevin/Desktop/reborn/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { bindActionCreators } from 'redux';\nimport { switchToMobile, switchToDesktop, storeWindowDimensions } from '../actions/index.js';\nimport Header from './Header.js';\nimport \"../styles/App.css\";\nimport map from \"lodash\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      var _this = this;\n\n      var window_dimensions = this.props.window_dimensions;\n      this.timeout && clearTimeout(this.timeout);\n      this.timeout = setTimeout(function () {\n        _this.props.storeWindowDimensions(window.innerWidth, window.innerHeight);\n      }, 400);\n\n      if (window.innerWidth < 810) {\n        // Trigger mobile version\n        !window_dimensions.isMobile && this.props.switchToMobile();\n      } else {\n        // Trigger desktop version\n        !window_dimensions.isDesktop && this.props.switchToDesktop();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n      var window_dimensions = this.props.window_dimensions;\n      this.props.storeWindowDimensions(window.innerWidth, window.innerHeight);\n\n      if (window.innerWidth < 810) {\n        // Trigger mobile version\n        !window_dimensions.isMobile && this.props.switchToMobile();\n      } else {\n        // Trigger desktop version\n        !window_dimensions.isDesktop && this.props.switchToDesktop();\n      }\n    }\n  }, {\n    key: \"renderConcepts\",\n    value: function renderConcepts() {\n      var concepts = this.props.concepts;\n      return;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"main-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), this.renderConcepts());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction matchDispatchToProps(dispatch) {\n  return bindActionCreators({\n    storeWindowDimensions: storeWindowDimensions,\n    switchToMobile: switchToMobile,\n    switchToDesktop: switchToDesktop\n  }, dispatch);\n}\n\nvar selector = createSelector(function (state) {\n  return state['window_dimensions'];\n}, function (state) {\n  return state['concepts'];\n}, function (window_dimensions, concepts) {\n  return {\n    window_dimensions: window_dimensions,\n    concepts: concepts\n  };\n});\nexport default connect(selector, matchDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Kevin/Desktop/reborn/src/components/App.js"],"names":["React","Component","connect","createSelector","bindActionCreators","switchToMobile","switchToDesktop","storeWindowDimensions","Header","map","App","window_dimensions","props","timeout","clearTimeout","setTimeout","window","innerWidth","innerHeight","isMobile","isDesktop","addEventListener","updateDimensions","bind","concepts","renderConcepts","matchDispatchToProps","dispatch","selector","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SACEC,cADF,EAEEC,eAFF,EAGEC,qBAHF,QAIO,qBAJP;AAKA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,GAAP,MAAgB,QAAhB;;IAGMC,G;;;;;;;;;;;;;uCACe;AAAA;;AAAA,UACTC,iBADS,GACa,KAAKC,KADlB,CACTD,iBADS;AAEjB,WAAKE,OAAL,IAAgBC,YAAY,CAAC,KAAKD,OAAN,CAA5B;AACA,WAAKA,OAAL,GAAeE,UAAU,CAAC,YAAM;AAC9B,QAAA,KAAI,CAACH,KAAL,CAAWL,qBAAX,CAAiCS,MAAM,CAACC,UAAxC,EAAoDD,MAAM,CAACE,WAA3D;AACD,OAFwB,EAEtB,GAFsB,CAAzB;;AAIA,UAAIF,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AAC3B;AACA,SAACN,iBAAiB,CAACQ,QAAnB,IAA+B,KAAKP,KAAL,CAAWP,cAAX,EAA/B;AACD,OAHD,MAIK;AACH;AACA,SAACM,iBAAiB,CAACS,SAAnB,IAAgC,KAAKR,KAAL,CAAWN,eAAX,EAAhC;AACD;AACF;;;wCAEmB;AAClBU,MAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAlC;AADkB,UAEVZ,iBAFU,GAEY,KAAKC,KAFjB,CAEVD,iBAFU;AAGlB,WAAKC,KAAL,CAAWL,qBAAX,CAAiCS,MAAM,CAACC,UAAxC,EAAoDD,MAAM,CAACE,WAA3D;;AACA,UAAIF,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;AAC3B;AACA,SAACN,iBAAiB,CAACQ,QAAnB,IAA+B,KAAKP,KAAL,CAAWP,cAAX,EAA/B;AACD,OAHD,MAIK;AACH;AACA,SAACM,iBAAiB,CAACS,SAAnB,IAAgC,KAAKR,KAAL,CAAWN,eAAX,EAAhC;AACD;AACF;;;qCAEgB;AAAA,UACPkB,QADO,GACM,KAAKZ,KADX,CACPY,QADO;AAGf;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEG,KAAKC,cAAL,EAFH,CADF;AAcD;;;;EArDexB,S;;AAwDlB,SAASyB,oBAAT,CAA8BC,QAA9B,EAAwC;AACtC,SAAOvB,kBAAkB,CAAC;AACxBG,IAAAA,qBAAqB,EAArBA,qBADwB;AAExBF,IAAAA,cAAc,EAAdA,cAFwB;AAGxBC,IAAAA,eAAe,EAAfA;AAHwB,GAAD,EAItBqB,QAJsB,CAAzB;AAKD;;AAED,IAAMC,QAAQ,GAAGzB,cAAc,CAC7B,UAAA0B,KAAK;AAAA,SAAIA,KAAK,CAAC,mBAAD,CAAT;AAAA,CADwB,EAE7B,UAAAA,KAAK;AAAA,SAAIA,KAAK,CAAC,UAAD,CAAT;AAAA,CAFwB,EAG7B,UACElB,iBADF,EAEEa,QAFF,EAGG;AACD,SAAQ;AACNb,IAAAA,iBAAiB,EAAjBA,iBADM;AAENa,IAAAA,QAAQ,EAARA;AAFM,GAAR;AAID,CAX4B,CAA/B;AAcA,eAAetB,OAAO,CAAC0B,QAAD,EAAWF,oBAAX,CAAP,CAAwChB,GAAxC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { bindActionCreators } from 'redux';\nimport {\n  switchToMobile,\n  switchToDesktop,\n  storeWindowDimensions,\n} from '../actions/index.js';\nimport Header from './Header.js';\nimport \"../styles/App.css\";\nimport map from \"lodash\"\n\n\nclass App extends Component {\n  updateDimensions() {\n    const { window_dimensions } = this.props;\n    this.timeout && clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.props.storeWindowDimensions(window.innerWidth, window.innerHeight);\n    }, 400);\n\n    if (window.innerWidth < 810) {\n      // Trigger mobile version\n      !window_dimensions.isMobile && this.props.switchToMobile();\n    }\n    else {\n      // Trigger desktop version\n      !window_dimensions.isDesktop && this.props.switchToDesktop();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    const { window_dimensions } = this.props;\n    this.props.storeWindowDimensions(window.innerWidth, window.innerHeight);\n    if (window.innerWidth < 810) {\n      // Trigger mobile version\n      !window_dimensions.isMobile && this.props.switchToMobile();\n    }\n    else {\n      // Trigger desktop version\n      !window_dimensions.isDesktop && this.props.switchToDesktop();\n    }\n  }\n\n  renderConcepts() {\n    const {Â concepts } = this.props;\n\n    return \n  }\n\n  render() {\n    return (\n      <div className=\"main-body\">\n        <Header />\n        {this.renderConcepts()}\n        {/* <div className=\"concept-container\" style={{backgroundImage: \"url(\" + macos_url + \")\"}}>\n        </div>\n        <div className=\"concept-container\" style={{backgroundImage: \"url(\" + mogi_url + \")\"}}>\n        </div>\n        <div className=\"concept-container\" style={{backgroundImage: \"url(\" + fuji_url + \")\"}}>\n        </div>\n        <div className=\"concept-container\" style={{backgroundImage: \"url(\" + mogi_url + \")\"}}>\n        </div> */}\n      </div>\n    )\n  }\n}\n\nfunction matchDispatchToProps(dispatch) {\n  return bindActionCreators({\n    storeWindowDimensions,\n    switchToMobile,\n    switchToDesktop,\n  }, dispatch)\n}\n\nconst selector = createSelector(\n  state => state['window_dimensions'],\n  state => state['concepts'],\n  (\n    window_dimensions,\n    concepts\n) => {\n    return  {\n      window_dimensions,\n      concepts\n    };\n  }\n);\n\nexport default connect(selector, matchDispatchToProps)(App);\n\n"]},"metadata":{},"sourceType":"module"}