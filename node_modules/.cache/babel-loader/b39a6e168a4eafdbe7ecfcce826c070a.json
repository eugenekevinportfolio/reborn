{"ast":null,"code":"import _classCallCheck from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Kevin/Code/reborn/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Kevin/Code/reborn/src/components/Mogi.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport ArticleVideo from \"./ArticleVideo.js\";\nimport ArticleImage from \"./ArticleImage.js\";\nimport apple_maps from \"../videos/Apple Maps.mp4\";\nimport reading from \"../videos/Reading.mp4\";\nimport notification_centre from \"../videos/Notification Centre.mp4\"; // import stopwatch from \"../img/Stopwatch.jpg\";\n// import uber from \"../img/Uber.jpg\";\n// import lockscreen from \"../img/Lockscreen.jpg\";\n\nimport stopwatch_video from \"../videos/Stopwatch.mp4\";\nimport livesharing from \"../videos/LiveSharing.mp4\";\nimport summoning from \"../videos/Summoning Siri.mp4\";\nimport sending from \"../videos/Sending.mp4\";\nimport switching from \"../videos/Switching.mp4\";\nimport actions from \"../videos/Siri actions.mp4\";\nimport mail from \"../videos/EditOnTheGo.mov\";\nimport saving from \"../videos/SavePicture.mp4\";\nimport saved_dragged from \"../videos/SavedDragged.mp4\"; // import clipboard_img from \"../img/Clipboard.jpg\";\n// import pick from \"../img/Pick.jpg\";\n// import cards from \"../img/Cards.jpg\";\n\nimport factorized from \"../videos/Factorized.mp4\"; // import universal_messages from \"../img/MessagesApps.jpg\";\n\nimport universal_contacts from \"../videos/Contact.mp4\";\n\nvar Mogi =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Mogi, _Component);\n\n  function Mogi() {\n    _classCallCheck(this, Mogi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Mogi).apply(this, arguments));\n  }\n\n  _createClass(Mogi, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          currentMediaIndex = _this$props.currentMediaIndex,\n          concepts = _this$props.concepts,\n          selected_concept = _this$props.selected_concept;\n      var darkMode = selected_concept && concepts[selected_concept].darkMode;\n      return React.createElement(\"div\", {\n        id: \"article-body\",\n        className: \"article-body max-width \" + (darkMode ? \"article-body--dark\" : \"\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"article-paragraph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Live Notifications stand at the core of this concept. They are my attempt at bringing true multitasking to the mobile, meaning, the ability to do multiple things at the same time. To have a clear understanding of what they stand for, let\\u2019s imagine first that Apple Maps is able to determine which line the user is currently using.\"), React.createElement(ArticleVideo, {\n        index: 0,\n        currentMediaIndex: currentMediaIndex,\n        videoSrc: apple_maps,\n        mediaDescription: \"Once the line is confirmed, itineraries will be calculated using the line as a starting point.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Mogi;\n}(Component);\n\nvar selector = createSelector(function (state) {\n  return state[\"selected_concept\"];\n}, function (state) {\n  return state[\"concepts\"];\n}, function (selected_concept, concepts) {\n  return {\n    selected_concept: selected_concept,\n    concepts: concepts\n  };\n});\nexport default connect(selector)(Mogi);","map":{"version":3,"sources":["/Users/Kevin/Code/reborn/src/components/Mogi.js"],"names":["React","Component","connect","createSelector","ArticleVideo","ArticleImage","apple_maps","reading","notification_centre","stopwatch_video","livesharing","summoning","sending","switching","actions","mail","saving","saved_dragged","factorized","universal_contacts","Mogi","props","currentMediaIndex","concepts","selected_concept","darkMode","selector","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,mBAAP,MAAgC,mCAAhC,C,CACA;AACA;AACA;;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B,C,CACA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;;IAEMC,I;;;;;;;;;;;;;6BACK;AAAA,wBACmD,KAAKC,KADxD;AAAA,UACCC,iBADD,eACCA,iBADD;AAAA,UACoBC,QADpB,eACoBA,QADpB;AAAA,UAC8BC,gBAD9B,eAC8BA,gBAD9B;AAEP,UAAMC,QAAQ,GAAGD,gBAAgB,IAAID,QAAQ,CAACC,gBAAD,CAAR,CAA2BC,QAAhE;AAEA,aACE;AACE,QAAA,EAAE,EAAC,cADL;AAEE,QAAA,SAAS,EACP,6BAA6BA,QAAQ,GAAG,oBAAH,GAA0B,EAA/D,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAG,QAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2VANF,EAaE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAE,CADT;AAEE,QAAA,iBAAiB,EAAEH,iBAFrB;AAGE,QAAA,QAAQ,EAAEhB,UAHZ;AAIE,QAAA,gBAAgB,EACd,gGALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,CADF;AAwBD;;;;EA7BgBL,S;;AAgCnB,IAAMyB,QAAQ,GAAGvB,cAAc,CAC7B,UAAAwB,KAAK;AAAA,SAAIA,KAAK,CAAC,kBAAD,CAAT;AAAA,CADwB,EAE7B,UAAAA,KAAK;AAAA,SAAIA,KAAK,CAAC,UAAD,CAAT;AAAA,CAFwB,EAG7B,UAACH,gBAAD,EAAmBD,QAAnB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,gBAAgB,EAAhBA,gBADK;AAELD,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID,CAR4B,CAA/B;AAWA,eAAerB,OAAO,CAACwB,QAAD,CAAP,CAAkBN,IAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport ArticleVideo from \"./ArticleVideo.js\";\nimport ArticleImage from \"./ArticleImage.js\";\nimport apple_maps from \"../videos/Apple Maps.mp4\";\nimport reading from \"../videos/Reading.mp4\";\nimport notification_centre from \"../videos/Notification Centre.mp4\";\n// import stopwatch from \"../img/Stopwatch.jpg\";\n// import uber from \"../img/Uber.jpg\";\n// import lockscreen from \"../img/Lockscreen.jpg\";\nimport stopwatch_video from \"../videos/Stopwatch.mp4\";\nimport livesharing from \"../videos/LiveSharing.mp4\";\nimport summoning from \"../videos/Summoning Siri.mp4\";\nimport sending from \"../videos/Sending.mp4\";\nimport switching from \"../videos/Switching.mp4\";\nimport actions from \"../videos/Siri actions.mp4\";\nimport mail from \"../videos/EditOnTheGo.mov\";\nimport saving from \"../videos/SavePicture.mp4\";\nimport saved_dragged from \"../videos/SavedDragged.mp4\";\n// import clipboard_img from \"../img/Clipboard.jpg\";\n// import pick from \"../img/Pick.jpg\";\n// import cards from \"../img/Cards.jpg\";\nimport factorized from \"../videos/Factorized.mp4\";\n// import universal_messages from \"../img/MessagesApps.jpg\";\nimport universal_contacts from \"../videos/Contact.mp4\";\n\nclass Mogi extends Component {\n  render() {\n    const { currentMediaIndex, concepts, selected_concept } = this.props;\n    const darkMode = selected_concept && concepts[selected_concept].darkMode;\n\n    return (\n      <div\n        id=\"article-body\"\n        className={\n          \"article-body max-width \" + (darkMode ? \"article-body--dark\" : \"\")\n        }\n      >\n        <p className=\"article-paragraph\">\n          Live Notifications stand at the core of this concept. They are my\n          attempt at bringing true multitasking to the mobile, meaning, the\n          ability to do multiple things at the same time. To have a clear\n          understanding of what they stand for, letâ€™s imagine first that Apple\n          Maps is able to determine which line the user is currently using.\n        </p>\n        <ArticleVideo\n          index={0}\n          currentMediaIndex={currentMediaIndex}\n          videoSrc={apple_maps}\n          mediaDescription={\n            \"Once the line is confirmed, itineraries will be calculated using the line as a starting point.\"\n          }\n        />\n      </div>\n    );\n  }\n}\n\nconst selector = createSelector(\n  state => state[\"selected_concept\"],\n  state => state[\"concepts\"],\n  (selected_concept, concepts) => {\n    return {\n      selected_concept,\n      concepts\n    };\n  }\n);\n\nexport default connect(selector)(Mogi);\n"]},"metadata":{},"sourceType":"module"}